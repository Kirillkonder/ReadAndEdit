// exportService.ts - –°–µ—Ä–≤–∏—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
import { Context } from "grammy";
import { MessagesRepository } from "./database";
import { createReadStream, mkdirSync, writeFileSync, createWriteStream } from "fs";
import { tmpdir } from "os";
import { join } from "path";
import archiver from "archiver";
import { InputFile } from "grammy";
import * as fs from "fs";
import { SubscriptionService } from "./services";

export class ExportService {
  private messagesCollection = new MessagesRepository();
  private subscriptionService = new SubscriptionService();

  async startExportProcess(ctx: Context) {
    if (!ctx.from) return;

    // –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ü–ò–°–ö–£
    const hasSubscription = await this.subscriptionService.checkAccess(ctx.from.id);
    if (!hasSubscription) {
      await ctx.reply(
        "‚ùå <b>–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n" +
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
              [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
      return;
    }

    await ctx.reply(
      "üíæ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏</b>\n\n" +
      "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n\n" +
      "<i>–ü—Ä–∏–º–µ—Ä: @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username</i>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]
          ]
        }
      }
    );
  }

  async exportChatHistory(ctx: Context, targetUsername: string) {
    if (!ctx.from) return;

    // –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ü–ò–°–ö–£ –ü–ï–†–ï–î –≠–ö–°–ü–û–†–¢–û–ú
    const hasSubscription = await this.subscriptionService.checkAccess(ctx.from.id);
    if (!hasSubscription) {
      await ctx.reply(
        "‚ùå <b>–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n" +
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
              [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
      return;
    }

    try {
      // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
      const cleanUsername = targetUsername.replace('@', '');
      
      await ctx.reply("üîÑ –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏...");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allMessages = await this.messagesCollection.getAllMessagesByUser(ctx.from.id);
      
      // –ù–ê–•–û–î–ò–ú ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      let targetUserId: number | null = null;
      for (const msg of allMessages) {
        if (msg.senderUsername?.toLowerCase() === cleanUsername.toLowerCase()) {
          targetUserId = msg.senderId;
          break;
        }
      }

      if (!targetUserId) {
        await ctx.reply(
          "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "export_chat" }],
                [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
              ]
            }
          }
        );
        return;
      }

      // –§–ò–õ–¨–¢–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –ú–ï–ñ–î–£ –î–í–£–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
      const chatMessages = allMessages.filter(msg => 
        msg.senderId === ctx.from!.id || msg.senderId === targetUserId
      );

      if (chatMessages.length === 0) {
        await ctx.reply(
          "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "export_chat" }],
                [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
              ]
            }
          }
        );
        return;
      }

      await ctx.reply("üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ —Å —Ñ–∞–π–ª–∞–º–∏...");

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      const tempDir = join(tmpdir(), `chat_export_${ctx.from.id}_${Date.now()}`);
      mkdirSync(tempDir, { recursive: true });

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
      const photosDir = join(tempDir, 'photos');
      const voiceDir = join(tempDir, 'voice_messages');
      const videoDir = join(tempDir, 'video_messages');
      const videoFilesDir = join(tempDir, 'video_files'); // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ê–ü–ö–£ –î–õ–Ø –û–ë–´–ß–ù–´–• –í–ò–î–ï–û
      mkdirSync(photosDir, { recursive: true });
      mkdirSync(voiceDir, { recursive: true });
      mkdirSync(videoDir, { recursive: true });
      mkdirSync(videoFilesDir, { recursive: true }); // –°–û–ó–î–ê–ï–ú –ü–ê–ü–ö–£ –î–õ–Ø –û–ë–´–ß–ù–´–• –í–ò–î–ï–û

      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
      const textContent = this.generateTextExport(chatMessages, targetUserId, ctx.from.first_name, cleanUsername);
      writeFileSync(join(tempDir, 'chat_history.txt'), textContent, 'utf-8');

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ
      let photoCount = 0;
      let voiceCount = 0;
      let videoCount = 0;
      let videoFileCount = 0; // –î–û–ë–ê–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –û–ë–´–ß–ù–´–• –í–ò–î–ï–û

      for (const message of chatMessages) {
        try {
          const isFromTargetUser = message.senderId === targetUserId;
          const senderName = isFromTargetUser ? cleanUsername : ctx.from!.first_name;
          
          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
          if (message.hasMedia && message.media) {
            try {
              const file = await ctx.api.getFile(message.media);
              const filePath = file.file_path;
              
              if (filePath) {
                const downloadUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
                const response = await fetch(downloadUrl);
                const buffer = await response.arrayBuffer();
                
                const extension = this.getFileExtension(filePath);
                const photoFilename = `${senderName}_${message.messageId}${extension}`;
                writeFileSync(join(photosDir, photoFilename), Buffer.from(buffer));
                photoCount++;
              }
            } catch (error) {
              console.error(`Error downloading photo ${message.messageId}:`, error);
            }
          }

          // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (message.hasVoice && message.voice) {
            try {
              const file = await ctx.api.getFile(message.voice);
              const filePath = file.file_path;
              
              if (filePath) {
                const downloadUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
                const response = await fetch(downloadUrl);
                const buffer = await response.arrayBuffer();
                
                const voiceFilename = `${senderName}_${message.messageId}.ogg`;
                writeFileSync(join(voiceDir, voiceFilename), Buffer.from(buffer));
                voiceCount++;
              }
            } catch (error) {
              console.error(`Error downloading voice ${message.messageId}:`, error);
            }
          }

          // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏)
          if (message.hasVideo && message.video) {
            try {
              const file = await ctx.api.getFile(message.video);
              const filePath = file.file_path;
              
              if (filePath) {
                const downloadUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
                const response = await fetch(downloadUrl);
                const buffer = await response.arrayBuffer();
                
                const videoFilename = `${senderName}_${message.messageId}.mp4`;
                writeFileSync(join(videoDir, videoFilename), Buffer.from(buffer));
                videoCount++;
              }
            } catch (error) {
              console.error(`Error downloading video ${message.messageId}:`, error);
            }
          }

          // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ
          if (message.hasVideoFile && message.videoFile) {
            try {
              const file = await ctx.api.getFile(message.videoFile);
              const filePath = file.file_path;
              
              if (filePath) {
                const downloadUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
                const response = await fetch(downloadUrl);
                const buffer = await response.arrayBuffer();
                
                const videoFilename = `${senderName}_${message.messageId}.mp4`;
                writeFileSync(join(videoFilesDir, videoFilename), Buffer.from(buffer));
                videoFileCount++;
              }
            } catch (error) {
              console.error(`Error downloading video file ${message.messageId}:`, error);
            }
          }
        } catch (error) {
          console.error(`Error processing message ${message.messageId}:`, error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
      const archivePath = join(tempDir, 'chat_export.zip');
      const output = createWriteStream(archivePath);
      const archive = archiver('zip', { zlib: { level: 9 } });

      return new Promise<void>((resolve, reject) => {
        output.on('close', async () => {
          try {
            await ctx.reply("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤...");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            await ctx.replyWithDocument(
              new InputFile(createReadStream(archivePath), `chat_export_${cleanUsername}_${Date.now()}.zip`),
              {
                caption: `üíæ –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å ${targetUsername}\n\n` +
                        `üìÖ –°–æ–æ–±—â–µ–Ω–∏–π: ${chatMessages.length}\n` +
                        `üì∏ –§–æ—Ç–æ: ${photoCount}\n` +
                        `üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö: ${voiceCount}\n` +
                        `üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π: ${videoCount}\n` +
                        `üé¨ –û–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ: ${videoFileCount}\n` + // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û –û–ë –û–ë–´–ß–ù–´–• –í–ò–î–ï–û
                        `üìÅ –í –∞—Ä—Ö–∏–≤–µ:\n` +
                        `   ‚Ä¢ chat_history.txt - –≤—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞\n` +
                        `   ‚Ä¢ photos/ - –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n` +
                        `   ‚Ä¢ voice_messages/ - –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ\n` +
                        `   ‚Ä¢ video_messages/ - –≤—Å–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è\n` +
                        `   ‚Ä¢ video_files/ - –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ\n\n` + // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ê–ü–ö–£ –û–ë–´–ß–ù–´–• –í–ò–î–ï–û
                        `‚úÖ <b>–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ</b>`,
                parse_mode: "HTML",
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                  ]
                }
              }
            );

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            this.deleteFolderRecursive(tempDir);

            resolve();
          } catch (error) {
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.deleteFolderRecursive(tempDir);
            reject(error);
          }
        });

        archive.on('error', (error) => {
          this.deleteFolderRecursive(tempDir);
          reject(error);
        });

        archive.pipe(output);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
        archive.file(join(tempDir, 'chat_history.txt'), { name: 'chat_history.txt' });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ
        archive.directory(photosDir, 'photos');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏
        archive.directory(voiceDir, 'voice_messages');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞–º–∏
        archive.directory(videoDir, 'video_messages');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å –æ–±—ã—á–Ω—ã–º–∏ –≤–∏–¥–µ–æ
        archive.directory(videoFilesDir, 'video_files');

        archive.finalize();
      });

    } catch (error) {
      console.error("Error exporting chat:", error);
      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "export_chat" }],
              [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
    }
  }

  private generateTextExport(messages: any[], targetUserId: number, userName: string, targetUsername: string): string {
    let exportText = `–≠–ö–°–ü–û–†–¢ –ü–ï–†–ï–ü–ò–°–ö–ò\n`;
    exportText += `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${userName} –∏ ${targetUsername}\n`;
    exportText += `–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n`;
    exportText += `–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}\n\n`;
    exportText += '='.repeat(60) + '\n\n';

    messages.forEach((message, index) => {
      const date = new Date(message.sentAt).toLocaleString('ru-RU');
      const isFromTargetUser = message.senderId === targetUserId;
      const sender = isFromTargetUser ? targetUsername : userName;
      
      exportText += `[${date}] ${sender}:\n`;
      
      if (message.hasMedia) {
        exportText += `üì∏ –§–û–¢–û–ì–†–ê–§–ò–Ø\n`;
      } else if (message.hasVoice) {
        exportText += `üé§ –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï\n`;
      } else if (message.hasVideo) {
        exportText += `üé• –í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–ï\n`;
      } else if (message.hasVideoFile) {
        exportText += `üé¨ –û–ë–´–ß–ù–û–ï –í–ò–î–ï–û\n`; // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–´–ß–ù–´–ï –í–ò–î–ï–û
      } else {
        exportText += `${message.text}\n`;
      }
      
      if (message.isEdited) {
        exportText += `(–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ)\n`;
      }
      if (message.isDeleted) {
        exportText += `(—É–¥–∞–ª–µ–Ω–æ)\n`;
      }
      
      exportText += '\n' + '-'.repeat(40) + '\n\n';
    });

    return exportText;
  }

  private getFileExtension(filePath: string): string {
    const parts = filePath.split('.');
    return parts.length > 1 ? `.${parts[parts.length - 1]}` : '.jpg';
  }

  private deleteFolderRecursive(path: string) {
    if (fs.existsSync(path)) {
      fs.readdirSync(path).forEach((file) => {
        const curPath = join(path, file);
        if (fs.lstatSync(curPath).isDirectory()) {
          this.deleteFolderRecursive(curPath);
        } else {
          fs.unlinkSync(curPath);
        }
      });
      fs.rmdirSync(path);
    }
  }
}