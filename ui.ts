// ui.ts - UI —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–µ–Ω—é
import { Context } from "grammy";
import dedent from "dedent";
import { UserRepository, MessagesRepository } from "./database";
import { AdminService, SubscriptionService, formatDate, ReferralService } from "./services";
import { InputFile } from "grammy";
import * as fs from "fs";
import { ExportService } from './exportService';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
export async function handleCallbackQuery(ctx: Context) {
  console.log(`üì≤ CALLBACK RECEIVED: ${ctx.callbackQuery?.data}`);
  
  const adminService = new AdminService();
  const subscriptionService = new SubscriptionService();
  const referralService = new ReferralService();
  const messagesCollection = new MessagesRepository();
  
  try {
    const data = ctx.callbackQuery?.data;
    if (!data) {
      await ctx.answerCallbackQuery();
      return;
    }

    // –û–ë–†–ê–ë–û–¢–ö–ê VIDEO_FILE - –ü–ï–†–í–û–ô!
    if (data.startsWith('show_video_file_')) {
      console.log(`üé¨ VIDEO FILE BUTTON CLICKED: ${data}`);
      const messageId = parseInt(data.replace('show_video_file_', ''));
      console.log(`üîç Looking for message ID: ${messageId}`);
      
      try {
        const message = await messagesCollection.getById(messageId);
        console.log(`üìã Message from DB:`, {
          found: !!message,
          messageId: message?.messageId,
          hasVideoFile: message?.hasVideoFile,
          videoFile: message?.videoFile ? `EXISTS (${message.videoFile})` : 'NULL',
          senderName: message?.senderName
        });
        
        if (message && message.videoFile) {
          console.log(`üì§ Sending video with file_id: ${message.videoFile}`);
          
          try {
            await ctx.api.sendVideo(
              ctx.from!.id,
              message.videoFile,
              {
                caption: `üé¨ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç ${message.senderName}`,
                reply_markup: {
                  inline_keyboard: [
                    [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                  ]
                }
              }
            );
            console.log(`‚úÖ Video sent successfully`);
            await ctx.answerCallbackQuery("üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...");
          } catch (sendError) {
            console.error(`‚ùå Error sending video:`, sendError);
            await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ");
          }
        } else {
          console.log(`‚ùå Video file not found in DB for message ${messageId}`);
          await ctx.answerCallbackQuery("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ");
        }
      } catch (error) {
        console.error("üí• Error showing video file:", error);
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ");
      }
      return;
    }

    // –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    if (data.startsWith('play_voice_')) {
      const messageId = parseInt(data.replace('play_voice_', ''));
      
      try {
        const message = await messagesCollection.getById(messageId);
        
        if (message && message.voice) {
          await ctx.api.sendVoice(
            ctx.from!.id,
            message.voice,
            {
              caption: `üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.senderName}`,
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                ]
              }
            }
          );
          await ctx.answerCallbackQuery("üé§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
        } else {
          await ctx.answerCallbackQuery("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
      } catch (error) {
        console.error("Error playing voice message:", error);
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏");
      }
      return;
    }

    if (data.startsWith('show_photo_')) {
      const messageId = parseInt(data.replace('show_photo_', ''));
      
      try {
        const message = await messagesCollection.getById(messageId);
        
        if (message && message.media) {
          await ctx.api.sendPhoto(
            ctx.from!.id,
            message.media,
            {
              caption: `üñºÔ∏è –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç ${message.senderName}`,
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                ]
              }
            }
          );
          await ctx.answerCallbackQuery("üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...");
        } else {
          await ctx.answerCallbackQuery("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
      } catch (error) {
        console.error("Error showing photo:", error);
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ");
      }
      return;
    }

    if (data.startsWith('show_video_')) {
      const messageId = parseInt(data.replace('show_video_', ''));
      
      try {
        const message = await messagesCollection.getById(messageId);
        
        if (message && message.video) {
          await ctx.api.sendVideoNote(
            ctx.from!.id,
            message.video,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                ]
              }
            }
          );
          await ctx.answerCallbackQuery("üé• –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ...");
        } else {
          await ctx.answerCallbackQuery("‚ùå –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }
      } catch (error) {
        console.error("Error showing video message:", error);
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ");
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (data === 'main_menu') {
      await showMainMenu(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'bot_demo') {
      await showBotDemo(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'show_instructions') {
      await showConnectionInstructions(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'my_subscription') {
      await showMySubscription(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'buy_subscription') {
      await buySubscription(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'pay_subscription') {
      await subscriptionService.sendSubscriptionInvoice(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'referral_system') {
      await showReferralSystem(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'giftboom_system') {
      await showGiftBoomSystem(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'check_giftboom_sub') {
      await checkGiftBoomSubscription(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'support_cooperation') {
      await showSupportCooperation(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'export_chat') {
      const exportService = new ExportService();
      await exportService.startExportProcess(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    // –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –í–´–í–û–î–ê –°–†–ï–î–°–¢–í
    if (data === 'request_withdrawal') {
      await handleWithdrawalRequest(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data === 'admin_withdrawals') {
      await showAdminWithdrawals(ctx);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data.startsWith('admin_approve_withdrawal_')) {
      const requestId = parseInt(data.replace('admin_approve_withdrawal_', ''));
      await adminApproveWithdrawal(ctx, requestId);
      await ctx.answerCallbackQuery();
      return;
    }

    if (data.startsWith('admin_reject_withdrawal_')) {
      const requestId = parseInt(data.replace('admin_reject_withdrawal_', ''));
      await adminRejectWithdrawal(ctx, requestId);
      await ctx.answerCallbackQuery();
      return;
    }

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if (data.startsWith('admin_')) {
      const isAdmin = ctx.from ? await adminService.isAdmin(ctx.from.id) : false;
      if (!isAdmin) {
        await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
        return;
      }
      
      if (data === 'admin_panel') {
        await adminService.showAdminPanel(ctx);
      } else if (data === 'admin_users') {
        await adminService.showUsersList(ctx);
      } else if (data === 'admin_admins') {
        await adminService.showAdminsList(ctx);
      } else if (data === 'admin_stats') {
        await adminService.showAdminPanel(ctx);
      } else if (data === 'admin_give_sub_menu') {
        await adminService.showGiveSubscriptionMenu(ctx);
      } else if (data === 'admin_remove_sub_menu') {
        await adminService.showRemoveSubscriptionMenu(ctx);
      } else if (data === 'admin_user_info_menu') {
        await adminService.showUserInfoMenu(ctx);
      } else if (data === 'admin_manage_admins') {
        await adminService.showManageAdminsMenu(ctx);
      } else if (data === 'admin_make_admin_menu') {
        await adminService.showMakeAdminMenu(ctx);
      } else if (data === 'admin_remove_admin_menu') {
        await adminService.showRemoveAdminMenu(ctx);
      } else if (data === 'admin_broadcast_menu') {
        await adminService.showBroadcastMenu(ctx);
      } else if (data.startsWith('admin_give_')) {
        const parts = data.split('_');
        const days = parseInt(parts[2]);
        const userId = parseInt(parts[3]);
        await adminService.giveSubscription(ctx, userId, days);
      } else if (data.startsWith('admin_remove_')) {
        const parts = data.split('_');
        const userId = parseInt(parts[2]);
        if (parts.length === 3) {
          await adminService.removeSubscription(ctx, userId);
        } else if (parts.length === 4 && parts[1] === 'remove' && parts[2] === 'admin') {
          const userId = parseInt(parts[3]);
          await adminService.removeAdmin(ctx, userId);
        }
      } else if (data.startsWith('admin_make_admin_')) {
        const userId = parseInt(data.split('_')[3]);
        await adminService.makeAdmin(ctx, userId);
      } else if (data.startsWith('admin_user_')) {
        const userId = parseInt(data.split('_')[2]);
        await adminService.showUserInfo(ctx, userId);
      }
      
      await ctx.answerCallbackQuery();
      return;
    }

    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error("Error in callback handler:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
export async function showWelcomeMessage(ctx: Context) {
  if (!ctx.from) return;

  try {
    const welcomeMessage = dedent`
      üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram Business</b>
      
      üîî –ß—Ç–æ —è —É–º–µ—é:
      ‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—é –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      ‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—é –æ–± –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
      ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏)
      ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –æ–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ
      
      üöÄ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!
      
      –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    `;

    await ctx.reply(welcomeMessage, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞", callback_data: "bot_demo" }]
        ]
      }
    });
  } catch (error) {
    console.error("Error in showWelcomeMessage:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
export async function showBotDemo(ctx: Context) {
  if (!ctx.from) return;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await ctx.editMessageText("üìπ –ó–∞–≥—Ä—É–∂–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤
    const editVideoPath = "./img/edit.mp4";
    const deleteVideoPath = "./img/delete.mp4";
    
    if (fs.existsSync(editVideoPath) && fs.existsSync(deleteVideoPath)) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      await ctx.api.sendMediaGroup(ctx.from.id, [
        {
          type: "video",
          media: new InputFile(editVideoPath),
          caption: "üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è #1: –ö–∞–∫ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
        },
        {
          type: "video",
          media: new InputFile(deleteVideoPath),
          caption: "üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è #2: –ö–∞–∫ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
        }
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
      await ctx.api.sendMessage(
        ctx.from.id,
        "‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç üöÄ",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data: "show_instructions" }]
            ]
          }
        }
      );
    } else {
      console.error("Video files not found");
      await ctx.reply("‚ùå –í–∏–¥–µ–æ-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    }

  } catch (error) {
    console.error("Error in showBotDemo:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –±–æ—Ç–∞
export async function showConnectionInstructions(ctx: Context) {
  if (!ctx.from) return;

  try {
    const instructionsMessage = dedent`
      üìñ <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞</b>
      
      <b>–®–∞–≥ 1:</b> –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
      <b>–®–∞–≥ 2:</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <i>Telegram Business</i>
      <b>–®–∞–≥ 3:</b> –í—ã–±–µ—Ä–∏—Ç–µ <i>–ß–∞—Ç-–±–æ—Ç—ã</i>
      <b>–®–∞–≥ 4:</b> –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ —á–∞—Ç-–±–æ—Ç–∞
      
      ‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!
      
      üí° <b>–í–∞–∂–Ω–æ:</b> –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.
    `;

    await ctx.editMessageText(instructionsMessage, {
      parse_mode: "HTML"
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await showMainMenu(ctx);

  } catch (error) {
    console.error("Error in showConnectionInstructions:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.");
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
export async function showMainMenu(ctx: Context) {
  const usersCollection = new UserRepository();
  const adminService = new AdminService();
  
  if (!ctx.from) return;

  const hasActiveSubscription = await usersCollection.checkSubscription(ctx.from.id);
  const isAdmin = await adminService.isAdmin(ctx.from.id);

  let message = '';
  if (hasActiveSubscription) {
    message = dedent`
      üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
      
      ‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>
      
      –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.
      
      <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
      1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
      2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <i>Telegram Business -> –ß–∞—Ç-–±–æ—Ç—ã</i>
      3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ —á–∞—Ç-–±–æ—Ç–∞
    `;
  } else {
    message = dedent`
      üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
      
      ‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>
      
      –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.
      
      <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
      1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
      2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <i>Telegram Business -> –ß–∞—Ç-–±–æ—Ç—ã</i>
      3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ —á–∞—Ç-–±–æ—Ç–∞
    `;
  }

  const keyboard = [];
  
  if (isAdmin) {
    keyboard.push([{ text: "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]);
  }
  
  keyboard.push([{ text: "üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data: "my_subscription" }]);
  
  keyboard.push(
    [{ text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "referral_system" }],
    [{ text: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", callback_data: "export_chat" }],
    [{ text: "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data: "giftboom_system" }],
    [{ text: "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
    [{ text: "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞/–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data: "support_cooperation" }]
  );

  try {
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    await ctx.reply(message, {
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: keyboard }
    });
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ
export async function showSupportCooperation(ctx: Context) {
  if (!ctx.from) return;

  try {
    const supportMessage = dedent`
      üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</b>

      –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞, –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:

      üë§ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @manager_ReadAndEdit

      üìß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å:</b>
      ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º
      ‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –æ–ø–ª–∞—Ç–µ
      ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É
      ‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      ‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã

      –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! üöÄ
    `;

    try {
      await ctx.editMessageText(supportMessage, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url: "https://t.me/manager_ReadAndEdit" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      });
    } catch (error) {
      await ctx.reply(supportMessage, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url: "https://t.me/manager_ReadAndEdit" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      });
    }
  } catch (error) {
    console.error("Error in showSupportCooperation:", error);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
export async function showReferralSystemMessage(ctx: Context) {
  const usersCollection = new UserRepository();
  
  if (!ctx.from) return;

  try {
    const hasUsedBonus = await usersCollection.hasUsedGiftBoomBonus(ctx.from.id);
    const hasActiveSubscription = await usersCollection.checkSubscription(ctx.from.id);

    let message = '';
    
    if (hasUsedBonus) {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        ‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Gift Boom.

        –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è
      `;
    } else if (hasActiveSubscription) {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        ‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫—É!

        –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ
      `;
    } else {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        üî• <b>–ü–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:
        1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @giftboom_official
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        3. –ü–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –∫ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É

        ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
      `;
    }

    const keyboard = [];
    
    if (!hasUsedBonus && !hasActiveSubscription) {
      keyboard.push([{ text: "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ @giftboom", url: "https://t.me/giftboom_official" }]);
      keyboard.push([{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_giftboom_sub" }]);
    }
    
    keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]);

    await ctx.api.sendMessage(
      ctx.from.id,
      message,
      {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    console.error("Error in showReferralSystemMessage:", error);
  }
}

export async function showMySubscription(ctx: Context) {
  const usersCollection = new UserRepository();
  
  if (!ctx.from) return;

  try {
    const user = await usersCollection.getUserById(ctx.from.id);
    const hasActiveSubscription = await usersCollection.checkSubscription(ctx.from.id);

    if (hasActiveSubscription && user.subscriptionExpires) {
      const expiresDate = new Date(user.subscriptionExpires);
      const daysLeft = Math.ceil((user.subscriptionExpires - Date.now()) / (1000 * 60 * 60 * 24));
      
      let subscriptionType = "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π";
      if (user.subscriptionTier === "admin_forever") {
        subscriptionType = "üëë –í–µ—á–Ω–∞—è (–ê–¥–º–∏–Ω)";
      } else if (user.subscriptionTier === "admin") {
        subscriptionType = "‚ö° –í—ã–¥–∞–Ω–Ω–∞—è –∞–¥–º–∏–Ω–æ–º";
      } else if (user.subscriptionTier === "giftboom_bonus") {
        subscriptionType = "üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É";
      } else if (user.subscriptionTier === "monthly") {
        subscriptionType = "üíé –û–ø–ª–∞—á–µ–Ω–Ω–∞—è";
      } else if (user.subscriptionTier === "referral") {
        subscriptionType = "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è";
      }
      
      await ctx.editMessageText(
        dedent`
          ‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>
          
          üíé –¢–∞—Ä–∏—Ñ: ${subscriptionType}
          üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresDate.toLocaleDateString('ru-RU')}
          ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}
          
          –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ
        `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
              [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
    } else {
      await ctx.editMessageText(
        dedent`
          ‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>
          
          –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.
          
          üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 49 Stars
          ‚è∞ –°—Ä–æ–∫: 30 –¥–Ω–µ–π
          
          –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
        `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "buy_subscription" }],
              [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error("Error in showMySubscription:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.");
  }
}

 export async function buySubscription(ctx: Context) {
  const subscriptionService = new SubscriptionService();
  
  try {
    await ctx.editMessageText(
      dedent`
        üíé <b>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>
        
        üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 49 Stars
        ‚è∞ –°—Ä–æ–∫: 30 –¥–Ω–µ–π
        
        <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–∫–æ–≤)
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ
        
        –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 49 ‚≠ê", callback_data: "pay_subscription" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );
  } catch (error) {
    console.error("Error in buySubscription:", error);
  }
}

export async function showGiftBoomSystem(ctx: Context) {
  const usersCollection = new UserRepository();
  
  if (!ctx.from) return;

  try {
    const user = await usersCollection.getUserById(ctx.from.id);
    const hasUsedBonus = await usersCollection.hasUsedGiftBoomBonus(ctx.from.id);
    const hasActiveSubscription = await usersCollection.checkSubscription(ctx.from.id);

    let message = '';
    
    if (hasUsedBonus) {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        ‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Gift Boom.

        –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è
      `;
    } else if (hasActiveSubscription) {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        ‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫—É!

        –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ
      `;
    } else {
      message = dedent`
        üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

        üî• <b>–ü–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:
        1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @giftboom_official
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        3. –ü–æ–ª—É—á–∏—Ç–µ +7 –¥–Ω–µ–π –∫ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É

        ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
      `;
    }

    const keyboard = [];
    
    if (!hasUsedBonus && !hasActiveSubscription) {
      keyboard.push([{ text: "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ @giftboom", url: "https://t.me/giftboom_official" }]);
      keyboard.push([{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_giftboom_sub" }]);
    }
    
    keyboard.push([{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]);

    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error("Error in showReferralSystem:", error);
  }
}

export async function checkGiftBoomSubscription(ctx: Context) {
  const usersCollection = new UserRepository();
  
  if (!ctx.from) return;

  try {
    // –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò - –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
    const GIFTBOOM_CHANNEL = '@giftboom_official';
    let isSubscribed = false;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
      const chatMember = await ctx.api.getChatMember(GIFTBOOM_CHANNEL, ctx.from.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      isSubscribed = ['creator', 'administrator', 'member'].includes(chatMember.status);
      
      console.log(`User ${ctx.from.id} subscription status: ${chatMember.status}, isSubscribed: ${isSubscribed}`);
    } catch (error: any) {
      console.error('Error checking subscription:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "user not found" –∏–ª–∏ "chat not found" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
      if (error.description?.includes('user not found') || 
          error.description?.includes('chat not found') ||
          error.description?.includes('USER_NOT_PARTICIPANT') ||
          error.code === 400) {
        isSubscribed = false;
      } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.editMessageText(
          "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_giftboom_sub" }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "referral_system" }]
              ]
            }
          }
        );
        return;
      }
    }

    if (!isSubscribed) {
      await ctx.editMessageText(
        dedent`
          ‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @giftboom_official</b>

          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –µ—â–µ —Ä–∞–∑.

          üì¢ –ö–∞–Ω–∞–ª: @giftboom_official

          ‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
        `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ @giftboom", url: "https://t.me/giftboom_official" }],
              [{ text: "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_giftboom_sub" }],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "referral_system" }]
            ]
          }
        }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –±–æ–Ω—É—Å
    const hasUsedBonus = await usersCollection.hasUsedGiftBoomBonus(ctx.from.id);
    if (hasUsedBonus) {
      await ctx.editMessageText(
        "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å —Ä–∞–Ω–µ–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑.",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
            ]
          }
        }
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const user = await usersCollection.getUserById(ctx.from.id);
    const currentTime = Date.now();
    const bonusDays = 7;
    
    let newExpires: number;

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (user.subscriptionActive && user.subscriptionExpires && user.subscriptionExpires > currentTime) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      newExpires = user.subscriptionExpires + (bonusDays * 24 * 60 * 60 * 1000);
    } else {
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      newExpires = currentTime + (bonusDays * 24 * 60 * 60 * 1000);
    }

    await usersCollection.setAttribute(ctx.from.id, 'subscriptionActive', 1);
    await usersCollection.setAttribute(ctx.from.id, 'subscriptionExpires', newExpires);
    await usersCollection.setAttribute(ctx.from.id, 'subscriptionTier', 'giftboom_bonus');
    await usersCollection.markGiftBoomBonusUsed(ctx.from.id);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const updatedUser = await usersCollection.getUserById(ctx.from.id);
    const totalDays = Math.ceil((newExpires - currentTime) / (1000 * 60 * 60 * 24));

    await ctx.editMessageText(
      dedent`
        üéâ <b>–ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

        ‚úÖ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ +7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!

        üìÖ –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(newExpires).toLocaleDateString('ru-RU')}
        ‚è≥ –í—Å–µ–≥–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${totalDays}

        –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ @giftboom_official! üöÄ
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data: "my_subscription" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );

  } catch (error) {
    console.error("Error in checkGiftBoomSubscription:", error);
    await ctx.editMessageText(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data: "check_giftboom_sub" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
export async function showReferralSystem(ctx: Context) {
  const usersCollection = new UserRepository();
  const referralService = new ReferralService();
  
  if (!ctx.from) return;

  try {
    const user = await usersCollection.getUserById(ctx.from.id);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    let referralLink = user.referralLink;
    if (!referralLink) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
      referralLink = `https://t.me/${ctx.me.username}?start=ref_${ctx.from.id}`;
      await usersCollection.setReferralLink(ctx.from.id, referralLink);
    }

    const referralCount = user.referralCount || 0;
    const earnedStars = user.earnedStars || 0;
    const pendingWithdrawal = user.pendingWithdrawal || 0;
    const totalWithdrawn = user.totalWithdrawn || 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ–Ω—É—Å—ã
    const bonuses = [
      { count: 3, days: 7, achieved: referralCount >= 3 },
      { count: 5, days: 30, achieved: referralCount >= 5 },
      { count: 10, days: 180, achieved: referralCount >= 10 },
      { count: 30, days: -1, achieved: referralCount >= 30, text: "–Ω–∞–≤—Å–µ–≥–¥–∞" }
    ];

    let message = dedent`
      üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

      üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
      <code>${referralLink}</code>

      üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
      ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${referralCount}
      ‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ stars: ${earnedStars} ‚≠ê
      ‚Ä¢ –ù–∞ –≤—ã–≤–æ–¥–µ: ${pendingWithdrawal} ‚≠ê
      ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${totalWithdrawn} ‚≠ê

      üí∞ <b>–£—Å–ª–æ–≤–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞:</b>
      ‚Ä¢ 30% –æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 100 ‚≠ê
      ‚Ä¢ –í—ã–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è

      üéÅ <b>–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b>
    `;

    bonuses.forEach(bonus => {
      const status = bonus.achieved ? "‚úÖ" : "‚è≥";
      const daysText = bonus.days === -1 ? "–Ω–∞–≤—Å–µ–≥–¥–∞" : `${bonus.days} –¥–Ω–µ–π`;
      message += `\n${status} –ó–∞ ${bonus.count} —á–µ–ª–æ–≤–µ–∫ - ${daysText}`;
    });

    message += "\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.";

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    const shareText = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram Business!";
    const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫
    const keyboard: any[] = [
      [{ text: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url: shareUrl }],
      [{ text: "üí∞ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥", callback_data: "request_withdrawal" }], // –ö–ù–û–ü–ö–ê –í–°–ï–ì–î–ê –í–ò–î–ù–ê
      [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data: "referral_system" }],
      [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
    ];

    try {
      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      await ctx.reply(message, {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard }
      });
    }
  } catch (error) {
    console.error("Error in showReferralSystem:", error);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
async function handleWithdrawalRequest(ctx: Context) {
  const usersCollection = new UserRepository();
  const referralService = new ReferralService();
  
  if (!ctx.from) return;

  try {
    const user = await usersCollection.getUserById(ctx.from.id);
    const earnedStars = user.earnedStars || 0;

    // –£–ë–ò–†–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê 100 –ó–í–ï–ó–î - –ö–ù–û–ü–ö–ê –í–°–ï–ì–î–ê –î–û–°–¢–£–ü–ù–ê
    if (earnedStars < 100) {
      await ctx.editMessageText(
        `‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 ‚≠ê\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${earnedStars} ‚≠ê\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ stars! üöÄ`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data: "referral_system" }],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ", callback_data: "referral_system" }]
            ]
          }
        }
      );
      return;
    }

    await ctx.editMessageText(
      dedent`
        üí∞ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>
        
        üíé –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${earnedStars} ‚≠ê
        üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 ‚≠ê
        
        –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç 100 –¥–æ ${earnedStars}):
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "referral_system" }]
          ]
        }
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await usersCollection.setAttribute(ctx.from.id, 'awaitingWithdrawalAmount', 1);
    
  } catch (error) {
    console.error("Error in handleWithdrawalRequest:", error);
    await ctx.editMessageText("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–≤–æ–¥–∞");
  }
}

async function showAdminWithdrawals(ctx: Context) {
  const adminService = new AdminService();
  const referralService = new ReferralService();
  
  if (!ctx.from) return;

  try {
    const isAdmin = await adminService.isAdmin(ctx.from.id);
    if (!isAdmin) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
      return;
    }

    const pendingRequests = await referralService.getPendingWithdrawals();
    
    if (pendingRequests.length === 0) {
      await ctx.editMessageText(
        "üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n–ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "admin_withdrawals" }],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
      return;
    }

    let message = `üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b> (–≤—Å–µ–≥–æ: ${pendingRequests.length})\n\n`;
    
    pendingRequests.forEach((request, index) => {
      const userInfo = request.username ? `@${request.username}` : `ID: ${request.userId}`;
      message += dedent`
        ${index + 1}. <b>–ó–∞—è–≤–∫–∞ #${request.id}</b>
           üë§ ${request.userName} (${userInfo})
           üí∞ ${request.amount} ‚≠ê
           üìÖ ${new Date(request.createdAt).toLocaleString('ru-RU')}
        
      `;
    });

    const keyboard = [];
    
    pendingRequests.forEach(request => {
      keyboard.push([
        { 
          text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #${request.id}`, 
          callback_data: `admin_approve_withdrawal_${request.id}` 
        },
        { 
          text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #${request.id}`, 
          callback_data: `admin_reject_withdrawal_${request.id}` 
        }
      ]);
    });

    keyboard.push(
      [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "admin_withdrawals" }],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
    );

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: keyboard }
    });
    
  } catch (error) {
    console.error("Error in showAdminWithdrawals:", error);
    await ctx.editMessageText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥");
  }
}

async function adminApproveWithdrawal(ctx: Context, requestId: number) {
  const referralService = new ReferralService();
  const adminService = new AdminService();
  
  if (!ctx.from) return;

  try {
    const isAdmin = await adminService.isAdmin(ctx.from.id);
    if (!isAdmin) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
      return;
    }

    await referralService.processWithdrawal(requestId, ctx.from.id, true);
    
    await ctx.editMessageText(
      "‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞</b>\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data: "admin_withdrawals" }]
          ]
        }
      }
    );
    
  } catch (error) {
    console.error("Error approving withdrawal:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
  }
}

async function adminRejectWithdrawal(ctx: Context, requestId: number) {
  const referralService = new ReferralService();
  const adminService = new AdminService();
  
  if (!ctx.from) return;

  try {
    const isAdmin = await adminService.isAdmin(ctx.from.id);
    if (!isAdmin) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞");
      return;
    }

    await referralService.processWithdrawal(requestId, ctx.from.id, false);
    
    await ctx.editMessageText(
      "‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data: "admin_withdrawals" }]
          ]
        }
      }
    );
    
  } catch (error) {
    console.error("Error rejecting withdrawal:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
  }
}