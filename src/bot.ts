import dotenv from "dotenv";
dotenv.config();

import { Bot, Context } from "grammy";
import dedent from "dedent";

import { getEnvVariable } from "./utils/getEnvVariable";
import { UserRepository, type IUserRepository } from "./database/User";
import { updateHandlers } from "./updates";

// === –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã ===
import { subscribeCommand } from "./commands/subscribe";
import { handlePreCheckoutQuery, handleSuccessfulPayment } from "./services/payments";
// ======================

export default class BotInstance {
  private bot: Bot = new Bot(getEnvVariable("BOT_TOKEN"));
  private usersCollection: IUserRepository = new UserRepository();

  constructor() {}

  public async run() {
    this.registerHandlers();
    await this.bot.start({
      onStart: () => console.log("‚úÖ Bot started successfully!"),
    });
  }

  // üëáüëá –≤–æ—Ç —Ç—É—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  private registerHandlers() {
    // --- —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    this.bot.command("start", (ctx: Context) => this.startCommandHandler(ctx));
    this.bot.command("help", (ctx: Context) => this.helpCommandHandler(ctx));
    this.bot.command("donate", (ctx: Context) => this.donateCommandHandler(ctx));

    // --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ updates (—Ç–≤–æ–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ) ---
    updateHandlers.forEach((handler) => {
      const middlewares = handler.middlewares ?? [];
      this.bot.on(
        handler.updateName,
        ...middlewares,
        async (ctx: Context) => handler.run(ctx)
      );
    });

    // --- üî• –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–ª–∞—Ç–µ–∂–∏ Telegram Stars / XTR ---
    // –ö–æ–º–∞–Ω–¥–∞ /subscribe ‚Äî –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    this.bot.command("subscribe", async (ctx) => {
      if (!ctx.chat || ctx.chat.type !== "private") {
        return ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.");
      }
      await subscribeCommand(ctx as any);
    });

    // pre_checkout_query (Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
    this.bot.on("pre_checkout_query", async (ctx) => {
      await handlePreCheckoutQuery(ctx as any);
    });

    // —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–º–µ—Å—Ç–µ —Å message)
    this.bot.on("message", async (ctx) => {
      if ((ctx.message as any).successful_payment) {
        await handleSuccessfulPayment(ctx as any);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /ispaid <id> ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    this.bot.command("ispaid", async (ctx) => {
      const fromId = ctx.from?.id;
      const ADMIN_ID = Number(process.env.ADMIN_ID || 0);
      if (fromId !== ADMIN_ID) {
        return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");
      }

      const parts = ctx.message?.text?.split(" ");
      if (!parts || !parts[1])
        return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ispaid <userId>");

      const userId = Number(parts[1]);
      const repo = new (await import("./database/User/repository")).UserRepository();

      try {
        const user = await repo.getUserById(userId);
        const paidUntil = (user as any).paidUntil || 0;
        const active = paidUntil > Date.now();
        await ctx.reply(
          `üßæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}\n–°—Ç–∞—Ç—É—Å: ${
            active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
          }\n–û–ø–ª–∞—á–µ–Ω –¥–æ: ${new Date(paidUntil).toLocaleString()}`
        );
      } catch {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    });
  }

  // ===== —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–º–∞–Ω–¥ =====

  private async startCommandHandler(ctx: Context) {
    if (ctx.from) {
      try {
        const botMe = await ctx.api.getMe();

        await this.usersCollection.create({
          userId: ctx.from.id,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          username: ctx.from.username,
        });

        await ctx.reply(
          dedent`
            –ü—Ä–∏–≤–µ—Ç! üëã  
            –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.

            ‚öôÔ∏è –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è:
            1. –û—Ç–∫—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Business
            2. –ü–µ—Ä–µ–π–¥–∏ –≤ <i>Chatbots</i>
            3. –î–æ–±–∞–≤—å –º–µ–Ω—è (@${botMe.username}) –∫–∞–∫ —á–∞—Ç-–±–æ—Ç–∞

            –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.
          `,
          { parse_mode: "HTML" }
        );
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –≤ startCommandHandler:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  }

  private async helpCommandHandler(ctx: Context) {
    await ctx.reply(
      dedent`
        üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

        /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É  
        /subscribe ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (75‚≠ê / –º–µ—Å—è—Ü)  
        /ispaid <id> ‚Äî (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É  
        /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
      `,
      { parse_mode: "HTML" }
    );
  }

  private async donateCommandHandler(ctx: Context) {
    const donationAmountStr = ctx.match;
    const donationAmount = Number(donationAmountStr);

    if (isNaN(donationAmount) || donationAmount <= 1) {
      await ctx.reply(
        "–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n<code>/donate 25</code>",
        { parse_mode: "HTML" }
      );
      return;
    }

    if (ctx.chat) {
      await ctx.api.sendInvoice(ctx.chat.id, {
        title: "Donation",
        description: "Support the bot ‚ù§Ô∏è",
        payload: "donation",
        provider_token: "",
        currency: "XTR",
        prices: [{ label: "Donation", amount: donationAmount }],
      });
    }
  }
}
