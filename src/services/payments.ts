import { Context } from "grammy";
import { UserRepository } from "../database/User";

/**
 * ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (Telegram Stars –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
 */
export async function handlePreCheckoutQuery(ctx: Context) {
  try {
    await ctx.answerPreCheckoutQuery(true);
    console.log("‚úÖ PreCheckoutQuery —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ—Ç", ctx.from?.id);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handlePreCheckoutQuery:", error);
    await ctx.answerPreCheckoutQuery(false, {
      error_message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  }
}

/**
 * ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (successful_payment)
 */
export async function handleSuccessfulPayment(ctx: Context) {
  try {
    const userId = ctx.from?.id;
    if (!userId) return;

    const userRepo = new UserRepository();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π
    const paidUntil = Date.now() + 1000 * 60 * 60 * 24 * 30;

    await userRepo.updateUser(userId, { paidUntil });

    await ctx.reply(
      "üíé –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚ù§Ô∏è"
    );

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –¥–æ ${new Date(paidUntil).toLocaleString()}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ handleSuccessfulPayment:", error);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}
