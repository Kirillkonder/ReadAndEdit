import { Context } from "grammy";
import { UserRepository } from "../database/User/repository";
import { getEnvVariable } from "../utils/getEnvVariable";

const ADMIN_ID = Number(getEnvVariable("ADMIN_ID") || 0);
const userRepo = new UserRepository();

// –ö–æ–≥–¥–∞ –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç pre_checkout_query (–ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
export async function handlePreCheckoutQuery(ctx: Context) {
  try {
    const query = (ctx.update as any).pre_checkout_query;
    if (query && query.id) {
      await ctx.api.answerPreCheckoutQuery(query.id, { ok: true });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ pre_checkout_query:", err);
  }
}

// –ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
export async function handleSuccessfulPayment(ctx: Context) {
  const payment = (ctx.message as any).successful_payment;
  if (!payment) return;

  const from = ctx.from!;
  const userId = from.id;
  const now = Date.now();
  const paidUntil = now + 30 * 24 * 60 * 60 * 1000; // +30 –¥–Ω–µ–π

  try {
    await userRepo.setAttribute(userId, "paidUntil", paidUntil);

    await ctx.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π.");

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if (ADMIN_ID) {
      const text = `üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${from.username || "–±–µ–∑_username"} (ID: ${userId}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü. –°—É–º–º–∞: ${payment.total_amount} ‚≠ê`;
      await ctx.api.sendMessage(ADMIN_ID, text);
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ successful_payment:", err);
  }
}
