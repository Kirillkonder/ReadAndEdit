// bot.ts - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
import dotenv from "dotenv";
dotenv.config();

import { Bot, Context } from "grammy";
import dedent from "dedent";
import { UserRepository, IUserRepository } from './database';
import { AdminService, SubscriptionService, ReferralService } from './services';
import { updateHandlers } from "./handlers";
import { handleCallbackQuery, showMainMenu, showWelcomeMessage } from './ui';
import { ExportService } from './exportService';

// Main Bot Class
class BotInstance {
  private bot: Bot;
  private usersCollection: IUserRepository;
  private subscriptionService = new SubscriptionService();
  private adminService = new AdminService();
  private referralService = new ReferralService();
  private exportService = new ExportService();

  constructor() {
    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      throw new Error("BOT_TOKEN environment variable is not defined");
    }
    this.bot = new Bot(botToken);
    this.usersCollection = new UserRepository();
  }

  public async run() {
    try {
      this.registerHandlers();
      await this.bot.start({
        onStart: () => console.log("Bot started successfully!")
      });
    } catch (error) {
      console.error("Failed to start bot:", error);
      process.exit(1);
    }
  }

  private registerHandlers() {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É start
    this.bot.command("start", (ctx: Context) => this.startCommandHandler(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    this.bot.on("callback_query:data", handleCallbackQuery);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    this.bot.on("pre_checkout_query", (ctx) => this.handlePreCheckoutQuery(ctx));
    this.bot.on("message:successful_payment", (ctx) => this.handleSuccessfulPayment(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    this.bot.on("message:text", (ctx) => this.handleTextCommands(ctx));
    
    updateHandlers.forEach(handler => {
      const middlewares = handler.middlewares ?? [];
      this.bot.on(handler.updateName, ...middlewares, async (ctx: Context) => {
        try {
          await handler.run(ctx);
        } catch (error) {
          console.error(`Error in handler ${handler.constructor.name}:`, error);
        }
      });
    });

    // Error handler
    this.bot.catch((error) => {
      console.error("Bot error:", error);
    });
  }

  private async startCommandHandler(ctx: Context) {
  try {
    if (ctx.from) {
      const botMe = await ctx.api.getMe();
      const userId = ctx.from.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const userExists = await this.usersCollection.exists(userId);

      await this.usersCollection.create({
        userId: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name || "",
        username: ctx.from.username || "",
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
      const startPayload = ctx.match; // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Å—ã–ª–∫–∏
      
      if (startPayload && typeof startPayload === 'string' && startPayload.startsWith('ref_')) {
        const referrerId = parseInt(startPayload.replace('ref_', ''));
        
        if (referrerId && referrerId !== userId) {
          try {
            const referrer = await this.usersCollection.getUserById(referrerId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            await this.usersCollection.setReferredBy(userId, referrerId);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await this.usersCollection.incrementReferralCount(referrerId);
            
            console.log(`User ${userId} was referred by ${referrerId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            const updatedReferrer = await this.usersCollection.getUserById(referrerId);
            const newCount = updatedReferrer.referralCount;
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            let bonusDays = 0;
            if (newCount === 3) {
              bonusDays = 7;
            } else if (newCount === 5) {
              bonusDays = 30;
            } else if (newCount === 10) {
              bonusDays = 180;
            } else if (newCount === 30) {
              bonusDays = -1; // –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            }
            
            if (bonusDays !== 0) {
              await this.usersCollection.activateSubscription(referrerId, bonusDays, "referral");
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –±–æ–Ω—É—Å–µ
              const bonusText = bonusDays === -1 ? "–≤–µ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É" : `${bonusDays} –¥–Ω–µ–π`;
              await ctx.api.sendMessage(
                referrerId,
                `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ ${newCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ ${bonusText} –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!`,
                { parse_mode: "HTML" }
              );
            }
            
          } catch (error) {
            console.log("Referrer not found or error processing referral:", error);
          }
        }
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–µ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
      if (await this.adminService.isAdmin(ctx.from.id)) {
        await this.usersCollection.activateSubscription(ctx.from.id, -1, "admin_forever");
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await showWelcomeMessage(ctx);
    }
  } catch (error: any) {
    console.error("Error in startCommandHandler:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

  private async handlePreCheckoutQuery(ctx: Context) {
    try {
      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error("Error in pre-checkout query:", error);
      await ctx.answerPreCheckoutQuery(false, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }

 private async handleSuccessfulPayment(ctx: Context) {
  try {
    if (!ctx.from || !ctx.message?.successful_payment) return;

    console.log(`Processing payment for user ${ctx.from.id}`);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await this.subscriptionService.activateSubscription(ctx.from.id);
    console.log(`Subscription activated for user ${ctx.from.id}`);

    // –ù–û–í–´–ô –ö–û–î: –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
    try {
      const user = await this.usersCollection.getUserById(ctx.from.id);
      if (user.referredBy) {
        const purchaseAmount = 49; // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ stars
        await this.referralService.addReferralEarnings(user.referredBy, purchaseAmount);
        
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.referredBy}`);
      }
    } catch (refError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:', refError);
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersCollection = new UserRepository();
    const user = await usersCollection.getUserById(ctx.from.id);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const daysLeft = user.subscriptionExpires 
      ? Math.ceil((user.subscriptionExpires - Date.now()) / (1000 * 60 * 60 * 24))
      : 30;

    const expiresDate = user.subscriptionExpires 
      ? new Date(user.subscriptionExpires).toLocaleDateString('ru-RU')
      : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';

    await ctx.reply(
      dedent`
        ‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>
        
        üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresDate}
        ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.
        
        –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
        1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <i>Telegram Business -> –ß–∞—Ç-–±–æ—Ç—ã</i>
        3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ —á–∞—Ç-–±–æ—Ç–∞
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.
      `,
      { 
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data: "my_subscription" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );

  } catch (error) {
    console.error("Error handling successful payment:", error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    console.error("Error details:", {
      userId: ctx.from?.id,
      payment: ctx.message?.successful_payment,
      error: error instanceof Error ? error.message : error
    });

    // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(
      dedent`
        ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
        
        –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
        
        ‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>${ctx.from?.id}</code>
        ‚Ä¢ –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞: ${new Date().toLocaleString('ru-RU')}
        
        –ú—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.
      `,
      { 
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url: "https://t.me/whocencer" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );
  }
}

  private async handleTextCommands(ctx: Context) {
    try {
      if (!ctx.from || !ctx.message?.text) return;

      const text = ctx.message.text.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
      const user = await this.usersCollection.getUserById(ctx.from.id);
      const awaitingWithdrawal = await this.usersCollection.getUserAttribute(ctx.from.id, 'awaitingWithdrawalAmount');
      
      if (awaitingWithdrawal) {
        await this.handleWithdrawalAmountInput(ctx, text);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
      const isAdmin = await this.adminService.isAdmin(ctx.from.id);
      
      // –ù–û–í–´–ô –ö–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
      const awaitingBroadcast = await this.usersCollection.getUserAttribute(ctx.from.id, 'awaitingBroadcastMessage');
      
      if (isAdmin && awaitingBroadcast) {
        await this.adminService.broadcastMessage(ctx, text);
        await this.usersCollection.setAttribute(ctx.from.id, 'awaitingBroadcastMessage', 0);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª username)
      if (text.startsWith('@') || /^[a-zA-Z0-9_]{5,32}$/.test(text)) {
        await this.exportService.exportChatHistory(ctx, text);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω - –≤—ã—Ö–æ–¥–∏–º
      if (!isAdmin) return;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "123456789 30" –∏–ª–∏ "123456789 -1")
      const subMatch = text.match(/^(\d+)\s+(-?\d+)$/);
      if (subMatch) {
        const targetUserId = parseInt(subMatch[1]);
        const days = parseInt(subMatch[2]);
        
        await this.adminService.giveSubscription(ctx, targetUserId, days);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "123456789")
      const userIdMatch = text.match(/^(\d+)$/);
      if (userIdMatch) {
        const targetUserId = parseInt(userIdMatch[1]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try {
          const user = await this.usersCollection.getUserById(targetUserId);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          await this.adminService.showUserInfo(ctx, targetUserId);
        } catch (error) {
          await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        return;
      }

    } catch (error) {
      console.error("Error in handleTextCommands:", error);
    }
  }

  private async handleWithdrawalAmountInput(ctx: Context, amountText: string) {
  const usersCollection = new UserRepository();
  const referralService = new ReferralService();
  
  // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï ctx.from
  if (!ctx.from) {
    console.error("ctx.from is undefined in handleWithdrawalAmountInput");
    return;
  }
  
  try {
    const amount = parseInt(amountText);
    
    if (isNaN(amount) || amount < 100) {
      await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ - 100 ‚≠ê");
      return;
    }

    const user = await usersCollection.getUserById(ctx.from.id);
    
    if (user.earnedStars < amount) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.earnedStars} ‚≠ê`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    await referralService.createWithdrawalRequest(ctx.from.id, amount);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    await usersCollection.setAttribute(ctx.from.id, 'awaitingWithdrawalAmount', 0);
    
    await ctx.reply(
      dedent`
        ‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>
        
        üí∞ –°—É–º–º–∞: ${amount} ‚≠ê
        ‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
        üïê –í—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data: "referral_system" }],
            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    await this.notifyAdminsAboutWithdrawal(ctx.from.id, amount);
    
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

  private async notifyAdminsAboutWithdrawal(userId: number, amount: number) {
  try {
    const adminService = new AdminService();
    const usersCollection = new UserRepository();
    const allAdmins = await usersCollection.getAllAdmins();
    
    const user = await usersCollection.getUserById(userId);
    const userName = `${user.firstName} ${user.lastName || ''}`.trim();
    const userInfo = user.username ? `@${user.username}` : `ID: ${userId}`;
    
    const notificationText = dedent`
      üí∞ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>
      
      üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (${userInfo})
      üíé –°—É–º–º–∞: ${amount} ‚≠ê
      üÜî ID –∑–∞—è–≤–∫–∏: ${Date.now()}
      
      –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    `;
    
    for (const admin of allAdmins) {
      try {
        await this.bot.api.sendMessage(admin.userId, notificationText, {
          parse_mode: "HTML"
        });
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${admin.userId}:`, error);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤:", error);
  }
}
}

// Main execution
(async () => {
  try {
    console.log("Starting bot...");
    const bot = new BotInstance();
    await bot.run();
  } catch (error) {
    console.error("Failed to start application:", error);
    process.exit(1);
  }
})();