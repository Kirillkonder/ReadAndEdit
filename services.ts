// services.ts - –°–µ—Ä–≤–∏—Å—ã (Admin, Subscription, MarketAPI –∏ —É—Ç–∏–ª–∏—Ç—ã)
import { Context } from "grammy";
import dedent from "dedent";
import { UserRepository, IUserRepository, MAIN_ADMIN_ID } from "./database";

// Utility functions
export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export function formatDate(timestamp: number) {
  const date = new Date(timestamp);
  const year = date.toLocaleString("default", { year: "numeric" });
  const month = date.toLocaleString("default", { month: "2-digit" });
  const day = date.toLocaleString("default", { day: "2-digit" });
  const hour = date.toLocaleString("default", { hour: "2-digit" });
  const minutes = date.toLocaleString("default", { minute: "2-digit" });
  const seconds = date.toLocaleString("default", { second: "2-digit" });

  return `${day}.${month}.${year} ${hour}:${minutes}:${seconds}`;
}

// Market API Client
export class MarketApiClient {
  private apiBaseUrl: string = "https://gifts2.tonnel.network/api";

  public async getUserListedGifts(userId: number): Promise<any> {
    try {
      const response = await fetch(
        `${this.apiBaseUrl}/pageGifts`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            "page": 1,
            "limit": 30,
            "sort": "{\"message_post_time\":-1,\"gift_id\":-1}",
            "filter": `{\"seller\":${userId}}`,
          }),
        }
      );

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching user listed gifts:", error);
      return [];
    }
  }
}

// Admin Service
export class AdminService {
  private usersCollection = new UserRepository();

  async isAdmin(userId: number): Promise<boolean> {
    return await this.usersCollection.isAdmin(userId);
  }

  async isMainAdmin(userId: number): Promise<boolean> {
    return userId === MAIN_ADMIN_ID;
  }

  async showAdminPanel(ctx: Context): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
    return;
  }

  const totalUsers = await this.usersCollection.getAllUsers();
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  let activeSubscriptions = 0;
  for (const user of totalUsers) {
    const hasActiveSubscription = await this.usersCollection.getSubscriptionStatus(user.userId);
    if (hasActiveSubscription) {
      activeSubscriptions++;
    }
  }

  const admins = await this.usersCollection.getAllAdmins();

  await ctx.reply(
    dedent`
      üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>
      
      üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
      ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.length}
      ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions}
      ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}
      
      üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
    `,
    {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "admin_users" }],
          [{ text: "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data: "admin_admins" }],
          [{ text: "üíé –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "admin_give_sub_menu" }],
          [{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "admin_remove_sub_menu" }],
          [{ text: "üë§ –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data: "admin_user_info_menu" }],
          [{ text: "‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data: "admin_manage_admins" }],
          [{ text: "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data: "admin_broadcast_menu" }],
          [{ text: "üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data: "admin_withdrawals" }],
          [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data: "admin_stats" }],
          [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
        ]
      }
    }
  );
}



  async showUsersList(ctx: Context): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  const users = await this.usersCollection.getAllUsers();
  
  let message = `üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (–≤—Å–µ–≥–æ: ${users.length})\n\n`;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π for —Ü–∏–∫–ª–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const displayedUsers = users.slice(0, 50);
  
  for (let i = 0; i < displayedUsers.length; i++) {
    const user = displayedUsers[i];
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const hasActiveSubscription = await this.usersCollection.getSubscriptionStatus(user.userId);
    const status = hasActiveSubscription ? "‚úÖ" : "‚ùå";
    const adminStatus = user.isAdmin ? "üëë" : "";
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const safeFirstName = user.firstName
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
    
    const safeLastName = user.lastName 
      ? user.lastName
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#039;')
      : '';
    
    const username = user.username ? `@${user.username}` : "–Ω–µ—Ç username";
    
    const fullName = safeLastName 
      ? `${safeFirstName} ${safeLastName}` 
      : safeFirstName;
    
    message += `${i + 1}. ${status} ${adminStatus} ${fullName} (ID: ${user.userId}) - ${username}\n`;
  }

  if (users.length > 50) {
    message += `\n... –∏ –µ—â–µ ${users.length - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
  }

  await ctx.reply(message, { 
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
      ]
    }
  });
}


async updateAllSubscriptionStatuses(ctx: Context): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  try {
    const result = await this.usersCollection.updateAllSubscriptionStatuses();
    
    await ctx.reply(
      `‚úÖ <b>–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í—Å–µ–≥–æ: ${result.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  } catch (error) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫");
  }
}

  async showAdminsList(ctx: Context): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  const admins = await this.usersCollection.getAllAdmins();
  
  let message = `üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b> (–≤—Å–µ–≥–æ: ${admins.length})\n\n`;
  
  admins.forEach((admin, index) => {
    const mainAdmin = admin.userId === MAIN_ADMIN_ID ? " [–ì–õ–ê–í–ù–´–ô]" : "";
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã
    const safeFirstName = admin.firstName
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
    
    const safeLastName = admin.lastName 
      ? admin.lastName
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#039;')
      : '';
    
    const username = admin.username ? `@${admin.username}` : "–Ω–µ—Ç username";
    
    const fullName = safeLastName 
      ? `${safeFirstName} ${safeLastName}` 
      : safeFirstName;
    
    message += `${index + 1}. ${fullName} (ID: ${admin.userId}) - ${username}${mainAdmin}\n`;
  });

  await ctx.reply(message, { 
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
      ]
    }}
  );
}


  async showGiveSubscriptionMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üíé <b>–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789 30</code> - –≤—ã–¥–∞—Ç—å –Ω–∞ 30 –¥–Ω–µ–π\n<code>123456789 -1</code> - –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showRemoveSubscriptionMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showUserInfoMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showManageAdminsMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: "admin_make_admin_menu" }],
            [{ text: "‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: "admin_remove_admin_menu" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showMakeAdminMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üëë <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_manage_admins" }]
          ]
        }
      }
    );
  }

  async showRemoveAdminMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ùå <b>–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_manage_admins" }]
          ]
        }
      }
    );
  }

  async showBroadcastMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const usersCollection = new UserRepository();
    await usersCollection.setAttribute(ctx.from!.id, 'awaitingBroadcastMessage', 1);

    await ctx.reply(
      "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async broadcastMessage(ctx: Context, messageText: string): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  try {
    // –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –°–†–ê–ó–£, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const usersCollection = new UserRepository();
    await usersCollection.setAttribute(ctx.from!.id, 'awaitingBroadcastMessage', 0);
    
    const allUsers = await usersCollection.getAllUsers();
    
    let successCount = 0;
    let failCount = 0;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    const statusMessage = await ctx.reply(`üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    for (const user of allUsers) {
      try {
        await ctx.api.sendMessage(
          user.userId,
          `üì¢ <b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n${messageText}`,
          { parse_mode: "HTML" }
        );
        successCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`, error);
        failCount++;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    await ctx.api.editMessageText(
      ctx.chat!.id,
      statusMessage.message_id,
      `‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: ${failCount}\n‚Ä¢ –í—Å–µ–≥–æ: ${allUsers.length}`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
          ]
        }
      }
    );

  } catch (error) {
    console.error("Error in broadcastMessage:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.");
  }
}

  async giveSubscription(ctx: Context, userId: number, days: number): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  try {
    await this.usersCollection.activateSubscription(userId, days, "admin");
    
    const user = await this.usersCollection.getUserById(userId);
    const expiresDate = new Date(user.subscriptionExpires!);
    const totalDays = Math.ceil((user.subscriptionExpires! - Date.now()) / (1000 * 60 * 60 * 24));
    
    await ctx.reply(
      dedent`
        ‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>
        
        üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} (ID: ${user.userId})
        üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: ${days}
        üóìÔ∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresDate.toLocaleDateString('ru-RU')}
        ‚è≥ –í—Å–µ–≥–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${totalDays}
      `,
      { 
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  } catch (error) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

  async removeSubscription(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      await this.usersCollection.setAttribute(userId, 'subscriptionActive', 0);
      await this.usersCollection.setAttribute(userId, 'subscriptionTier', 'free');
      
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} (ID: ${user.userId})`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  }

  async showUserInfo(ctx: Context, userId: number): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  try {
    const user = await this.usersCollection.getUserById(userId);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const hasActiveSubscription = await this.usersCollection.getSubscriptionStatus(userId);
    
    let subscriptionInfo = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏";
    if (hasActiveSubscription && user.subscriptionExpires) {
      const expiresDate = new Date(user.subscriptionExpires);
      const daysLeft = Math.ceil((user.subscriptionExpires - Date.now()) / (1000 * 60 * 60 * 24));
      subscriptionInfo = `‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π, –¥–æ ${expiresDate.toLocaleDateString('ru-RU')})`;
    }

    const adminStatus = user.isAdmin ? "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const isMainAdmin = userId === MAIN_ADMIN_ID;

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã
    const safeFirstName = user.firstName
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
    
    const safeLastName = user.lastName 
      ? user.lastName
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#039;')
      : '';

    await ctx.reply(
      dedent`
        üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
        
        üÜî ID: <code>${user.userId}</code>
        üìõ –ò–º—è: ${safeFirstName} ${safeLastName}
        üîó Username: ${user.username ? '@' + user.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${formatDate(user.createdAt)}
        üíé –ü–æ–¥–ø–∏—Å–∫–∞: ${subscriptionInfo}
        üè∑Ô∏è –¢–∞—Ä–∏—Ñ: ${user.subscriptionTier}
        üë• –†–æ–ª—å: ${adminStatus} ${isMainAdmin ? '(–ì–õ–ê–í–ù–´–ô)' : ''}
        üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ stars: ${user.earnedStars || 0} ‚≠ê
        üìä –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referralCount || 0}
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: `admin_give_30_${userId}` },
              { text: "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: `admin_remove_${userId}` }
            ],
            user.isAdmin && !isMainAdmin ? [
              { text: "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: `admin_remove_admin_${userId}` }
            ] : !user.isAdmin ? [
              { text: "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data: `admin_make_admin_${userId}` }
            ] : [],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ].filter(Boolean)
        }
      }
    );
  } catch (error) {
    await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

  async makeAdmin(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (userId === MAIN_ADMIN_ID) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        return;
      }

      await this.usersCollection.makeAdmin(userId);
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} (ID: ${user.userId}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error: any) {
      if (error.message.includes("Cannot modify main administrator")) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  }

  async removeAdmin(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (userId === MAIN_ADMIN_ID) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        return;
      }

      await this.usersCollection.removeAdmin(userId);
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${user.firstName} (ID: ${user.userId}) —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error: any) {
      if (error.message.includes("Cannot remove main administrator")) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  }
}

// Subscription Service
export class SubscriptionService {
  private usersCollection = new UserRepository();

  async checkAccess(userId: number): Promise<boolean> {
    try {
      const hasActiveSubscription = await this.usersCollection.checkSubscription(userId);
      return hasActiveSubscription;
    } catch (error) {
      console.error("Error checking subscription:", error);
      return false;
    }
  }

  async sendSubscriptionInvoice(ctx: Context): Promise<void> {
  const title = "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
  const description = "–î–æ—Å—Ç—É–ø –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 30 –¥–Ω–µ–π";
  const payload = "subscription_monthly";
  const price = 49; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 49 Stars

  await ctx.api.sendInvoice(
    ctx.chat!.id,
    title,
    description,
    payload,
    "XTR", // Telegram Stars currency
    [
      {
        label: title,
        amount: price, // 49 Stars
      },
    ],
    {
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      is_flexible: false,
    }
  );
}

  public async activateSubscription(userId: number): Promise<void> {
  try {
    console.log(`Starting subscription activation for user ${userId}`);
    
    const days = 30;
    const tier = "monthly";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await this.usersCollection.exists(userId);
    if (!userExists) {
      throw new Error(`User ${userId} does not exist`);
    }

    await this.usersCollection.activateSubscription(userId, days, tier);
    console.log(`Subscription successfully activated for user ${userId}`);
    
  } catch (error) {
    console.error(`Error activating subscription for user ${userId}:`, error);
    throw new Error(`Failed to activate subscription: ${error instanceof Error ? error.message : error}`);
  }
}

  public async applyReferralBonus(userId: number, referralCount: number): Promise<number> {
    const usersCollection = new UserRepository();
    
    let bonusDays = 0;
    if (referralCount === 3) {
      bonusDays = 7;
    } else if (referralCount === 5) {
      bonusDays = 30;
    } else if (referralCount === 10) {
      bonusDays = 180;
    } else if (referralCount === 30) {
      bonusDays = -1; // –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    }
    
    if (bonusDays !== 0) {
      await usersCollection.activateSubscription(userId, bonusDays, "referral");
    }
    
    return bonusDays;
  }

}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç
export class ReferralService {
  private usersCollection = new UserRepository();

  // –ù–∞—á–∏—Å–ª—è–µ–º 30% –æ—Ç –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  public async addReferralEarnings(referrerId: number, purchaseAmount: number): Promise<void> {
    try {
      const earnings = Math.floor(purchaseAmount * 0.3); // 30% –æ—Ç —Å—É–º–º—ã
      const referrer = await this.usersCollection.getUserById(referrerId);
      
      const newEarnedStars = (referrer.earnedStars || 0) + earnings;
      await this.usersCollection.setAttribute(referrerId, 'earnedStars', newEarnedStars);
      
      console.log(`–ù–∞—á–∏—Å–ª–µ–Ω–æ ${earnings} stars —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId} –∑–∞ –ø–æ–∫—É–ø–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:`, error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
  public async createWithdrawalRequest(userId: number, amount: number): Promise<boolean> {
    try {
      const user = await this.usersCollection.getUserById(userId);
      
      if (amount < 100) {
        throw new Error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 100 stars");
      }
      
      if (user.earnedStars < amount) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ stars –¥–ª—è –≤—ã–≤–æ–¥–∞");
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
      const request = {
        id: Date.now(),
        userId: userId,
        amount: amount,
        status: 'pending',
        createdAt: new Date().toISOString(),
        userName: `${user.firstName} ${user.lastName || ''}`.trim(),
        username: user.username
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      const newEarnedStars = user.earnedStars - amount;
      const newPendingWithdrawal = (user.pendingWithdrawal || 0) + amount;
      
      await this.usersCollection.setAttribute(userId, 'earnedStars', newEarnedStars);
      await this.usersCollection.setAttribute(userId, 'pendingWithdrawal', newPendingWithdrawal);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
      const withdrawalRequests = JSON.parse(user.withdrawalRequests || '[]');
      withdrawalRequests.push(request);
      await this.usersCollection.setAttribute(userId, 'withdrawalRequests', JSON.stringify(withdrawalRequests));

      return true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  public async getPendingWithdrawals(): Promise<any[]> {
    try {
      const allUsers = await this.usersCollection.getAllUsers();
      const pendingRequests: any[] = [];

      for (const user of allUsers) {
        if (user.withdrawalRequests && user.withdrawalRequests !== '[]') {
          const requests = JSON.parse(user.withdrawalRequests);
          const userPendingRequests = requests.filter((req: any) => req.status === 'pending');
          pendingRequests.push(...userPendingRequests);
        }
      }

      return pendingRequests.sort((a, b) => a.createdAt.localeCompare(b.createdAt));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      return [];
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∞–¥–º–∏–Ω–æ–º
  public async processWithdrawal(requestId: number, adminId: number, approve: boolean): Promise<void> {
    try {
      const allUsers = await this.usersCollection.getAllUsers();
      
      for (const user of allUsers) {
        if (user.withdrawalRequests && user.withdrawalRequests !== '[]') {
          const requests = JSON.parse(user.withdrawalRequests);
          const requestIndex = requests.findIndex((req: any) => req.id === requestId);
          
          if (requestIndex !== -1) {
            const request = requests[requestIndex];
            
            if (approve) {
              // –û–¥–æ–±—Ä—è–µ–º –≤—ã–≤–æ–¥
              requests[requestIndex].status = 'approved';
              requests[requestIndex].processedAt = new Date().toISOString();
              requests[requestIndex].processedBy = adminId;
              
              const newPendingWithdrawal = (user.pendingWithdrawal || 0) - request.amount;
              const newTotalWithdrawn = (user.totalWithdrawn || 0) + request.amount;
              
              await this.usersCollection.setAttribute(user.userId, 'pendingWithdrawal', newPendingWithdrawal);
              await this.usersCollection.setAttribute(user.userId, 'totalWithdrawn', newTotalWithdrawn);
            } else {
              // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–≤–æ–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º stars
              requests[requestIndex].status = 'rejected';
              requests[requestIndex].processedAt = new Date().toISOString();
              requests[requestIndex].processedBy = adminId;
              
              const newEarnedStars = (user.earnedStars || 0) + request.amount;
              const newPendingWithdrawal = (user.pendingWithdrawal || 0) - request.amount;
              
              await this.usersCollection.setAttribute(user.userId, 'earnedStars', newEarnedStars);
              await this.usersCollection.setAttribute(user.userId, 'pendingWithdrawal', newPendingWithdrawal);
            }
            
            await this.usersCollection.setAttribute(user.userId, 'withdrawalRequests', JSON.stringify(requests));
            break;
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error);
      throw error;
    }
  }
}