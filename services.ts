// services.ts - –°–µ—Ä–≤–∏—Å—ã (Admin, Subscription, MarketAPI –∏ —É—Ç–∏–ª–∏—Ç—ã)
import { Context } from "grammy";
import dedent from "dedent";
import { UserRepository, IUserRepository, MAIN_ADMIN_ID } from "./database";

// Utility functions
export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

export function formatDate(timestamp: number) {
  const date = new Date(timestamp);
  const year = date.toLocaleString("default", { year: "numeric" });
  const month = date.toLocaleString("default", { month: "2-digit" });
  const day = date.toLocaleString("default", { day: "2-digit" });
  const hour = date.toLocaleString("default", { hour: "2-digit" });
  const minutes = date.toLocaleString("default", { minute: "2-digit" });
  const seconds = date.toLocaleString("default", { second: "2-digit" });

  return `${day}.${month}.${year} ${hour}:${minutes}:${seconds}`;
}

// Market API Client
export class MarketApiClient {
  private apiBaseUrl: string = "https://gifts2.tonnel.network/api";

  public async getUserListedGifts(userId: number): Promise<any> {
    try {
      const response = await fetch(
        `${this.apiBaseUrl}/pageGifts`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            "page": 1,
            "limit": 30,
            "sort": "{\"message_post_time\":-1,\"gift_id\":-1}",
            "filter": `{\"seller\":${userId}}`,
          }),
        }
      );

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching user listed gifts:", error);
      return [];
    }
  }
}

// Admin Service
export class AdminService {
  private usersCollection = new UserRepository();

  async isAdmin(userId: number): Promise<boolean> {
    return await this.usersCollection.isAdmin(userId);
  }

  async isMainAdmin(userId: number): Promise<boolean> {
    return userId === MAIN_ADMIN_ID;
  }

  async showAdminPanel(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) {
      await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
      return;
    }

    const totalUsers = await this.usersCollection.getAllUsers();
    const activeSubscriptions = totalUsers.filter(user => user.subscriptionActive).length;
    const admins = await this.usersCollection.getAllAdmins();

    await ctx.reply(
      dedent`
        üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>
        
        üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
        ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.length}
        ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activeSubscriptions}
        ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}
        
        üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
      `,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "admin_users" }],
            [{ text: "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data: "admin_admins" }],
            [{ text: "üíé –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "admin_give_sub_menu" }],
            [{ text: "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "admin_remove_sub_menu" }],
            [{ text: "üë§ –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data: "admin_user_info_menu" }],
            [{ text: "‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data: "admin_manage_admins" }],
            [{ text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data: "admin_stats" }],
            [{ text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
          ]
        }
      }
    );
  }

  async showUsersList(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    const users = await this.usersCollection.getAllUsers();
    
    let message = `üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (–≤—Å–µ–≥–æ: ${users.length})\n\n`;
    
    users.slice(0, 50).forEach((user, index) => {
      const status = user.subscriptionActive ? "‚úÖ" : "‚ùå";
      const adminStatus = user.isAdmin ? "üëë" : "";
      const username = user.username ? `@${user.username}` : "–Ω–µ—Ç username";
      message += `${index + 1}. ${status} ${adminStatus} ${user.firstName} (ID: ${user.userId}) - ${username}\n`;
    });

    if (users.length > 50) {
      message += `\n... –∏ –µ—â–µ ${users.length - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
    }

    await ctx.reply(message, { 
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
        ]
      }
    });
  }

  async showAdminsList(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    const admins = await this.usersCollection.getAllAdmins();
    
    let message = `üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b> (–≤—Å–µ–≥–æ: ${admins.length})\n\n`;
    
    admins.forEach((admin, index) => {
      const mainAdmin = admin.userId === MAIN_ADMIN_ID ? " [–ì–õ–ê–í–ù–´–ô]" : "";
      const username = admin.username ? `@${admin.username}` : "–Ω–µ—Ç username";
      message += `${index + 1}. ${admin.firstName} (ID: ${admin.userId}) - ${username}${mainAdmin}\n`;
    });

    await ctx.reply(message, { 
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
        ]
      }}
    );
  }


  async showGiveSubscriptionMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üíé <b>–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789 30</code> - –≤—ã–¥–∞—Ç—å –Ω–∞ 30 –¥–Ω–µ–π\n<code>123456789 -1</code> - –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showRemoveSubscriptionMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showUserInfoMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showManageAdminsMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: "admin_make_admin_menu" }],
            [{ text: "‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: "admin_remove_admin_menu" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  }

  async showMakeAdminMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "üëë <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_manage_admins" }]
          ]
        }
      }
    );
  }

  async showRemoveAdminMenu(ctx: Context): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    await ctx.reply(
      "‚ùå <b>–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:\n<code>123456789</code>",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_manage_admins" }]
          ]
        }
      }
    );
  }

  async giveSubscription(ctx: Context, userId: number, days: number): Promise<void> {
  if (!await this.isAdmin(ctx.from!.id)) return;

  try {
    await this.usersCollection.activateSubscription(userId, days, "admin");
    
    const user = await this.usersCollection.getUserById(userId);
    const expiresDate = new Date(user.subscriptionExpires!);
    const totalDays = Math.ceil((user.subscriptionExpires! - Date.now()) / (1000 * 60 * 60 * 24));
    
    await ctx.reply(
      dedent`
        ‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>
        
        üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} (ID: ${user.userId})
        üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: ${days}
        üóìÔ∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresDate.toLocaleDateString('ru-RU')}
        ‚è≥ –í—Å–µ–≥–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${totalDays}
      `,
      { 
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
          ]
        }
      }
    );
  } catch (error) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

  async removeSubscription(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      await this.usersCollection.setAttribute(userId, 'subscriptionActive', 0);
      await this.usersCollection.setAttribute(userId, 'subscriptionTier', 'free');
      
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName} (ID: ${user.userId})`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  }

  async showUserInfo(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      const user = await this.usersCollection.getUserById(userId);
      const hasActiveSubscription = await this.usersCollection.checkSubscription(userId);
      
      let subscriptionInfo = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏";
      if (hasActiveSubscription && user.subscriptionExpires) {
        const expiresDate = new Date(user.subscriptionExpires);
        const daysLeft = Math.ceil((user.subscriptionExpires - Date.now()) / (1000 * 60 * 60 * 24));
        subscriptionInfo = `‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π, –¥–æ ${expiresDate.toLocaleDateString('ru-RU')})`;
      }

      const adminStatus = user.isAdmin ? "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
      const isMainAdmin = userId === MAIN_ADMIN_ID;

      await ctx.reply(
        dedent`
          üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
          
          üÜî ID: <code>${user.userId}</code>
          üìõ –ò–º—è: ${user.firstName} ${user.lastName || ''}
          üîó Username: ${user.username ? '@' + user.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
          üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${formatDate(user.createdAt)}
          üíé –ü–æ–¥–ø–∏—Å–∫–∞: ${subscriptionInfo}
          üè∑Ô∏è –¢–∞—Ä–∏—Ñ: ${user.subscriptionTier}
          üë• –†–æ–ª—å: ${adminStatus} ${isMainAdmin ? '(–ì–õ–ê–í–ù–´–ô)' : ''}
        `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: `admin_give_30_${userId}` },
                { text: "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: `admin_remove_${userId}` }
              ],
              user.isAdmin && !isMainAdmin ? [
                { text: "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data: `admin_remove_admin_${userId}` }
              ] : !user.isAdmin ? [
                { text: "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data: `admin_make_admin_${userId}` }
              ] : [],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_panel" }]
            ].filter(Boolean)
          }
        }
      );
    } catch (error) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  }

  async makeAdmin(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (userId === MAIN_ADMIN_ID) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        return;
      }

      await this.usersCollection.makeAdmin(userId);
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.firstName} (ID: ${user.userId}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error: any) {
      if (error.message.includes("Cannot modify main administrator")) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  }

  async removeAdmin(ctx: Context, userId: number): Promise<void> {
    if (!await this.isAdmin(ctx.from!.id)) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (userId === MAIN_ADMIN_ID) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        return;
      }

      await this.usersCollection.removeAdmin(userId);
      const user = await this.usersCollection.getUserById(userId);
      
      await ctx.reply(
        `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${user.firstName} (ID: ${user.userId}) —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.`,
        { 
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data: "admin_panel" }]
            ]
          }
        }
      );
    } catch (error: any) {
      if (error.message.includes("Cannot remove main administrator")) {
        await ctx.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  }
}

// Subscription Service
export class SubscriptionService {
  private usersCollection = new UserRepository();

  async checkAccess(userId: number): Promise<boolean> {
    try {
      const hasActiveSubscription = await this.usersCollection.checkSubscription(userId);
      return hasActiveSubscription;
    } catch (error) {
      console.error("Error checking subscription:", error);
      return false;
    }
  }

  async sendSubscriptionInvoice(ctx: Context): Promise<void> {
  const title = "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
  const description = "–î–æ—Å—Ç—É–ø –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 30 –¥–Ω–µ–π";
  const payload = "subscription_monthly";
  const price = 49; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 49 Stars

  await ctx.api.sendInvoice(
    ctx.chat!.id,
    title,
    description,
    payload,
    "XTR", // Telegram Stars currency
    [
      {
        label: title,
        amount: price, // 49 Stars
      },
    ],
    {
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      is_flexible: false,
    }
  );
}

  public async activateSubscription(userId: number): Promise<void> {
  try {
    console.log(`Starting subscription activation for user ${userId}`);
    
    const days = 30;
    const tier = "monthly";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await this.usersCollection.exists(userId);
    if (!userExists) {
      throw new Error(`User ${userId} does not exist`);
    }

    await this.usersCollection.activateSubscription(userId, days, tier);
    console.log(`Subscription successfully activated for user ${userId}`);
    
  } catch (error) {
    console.error(`Error activating subscription for user ${userId}:`, error);
    throw new Error(`Failed to activate subscription: ${error instanceof Error ? error.message : error}`);
  }
}

  public async applyReferralBonus(userId: number, referralCount: number): Promise<number> {
    const usersCollection = new UserRepository();
    
    let bonusDays = 0;
    if (referralCount === 3) {
      bonusDays = 7;
    } else if (referralCount === 5) {
      bonusDays = 30;
    } else if (referralCount === 10) {
      bonusDays = 180;
    } else if (referralCount === 30) {
      bonusDays = -1; // –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    }
    
    if (bonusDays !== 0) {
      await usersCollection.activateSubscription(userId, bonusDays, "referral");
    }
    
    return bonusDays;
  }

}